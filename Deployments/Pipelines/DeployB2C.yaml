########################################
### Budgetify - Deploy B2C Resources ###
########################################

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

trigger: none
pr: none

parameters:
  - name: environment
    displayName: Deploy to which environment
    default: dev
    type: string
    values:
      - dev
  - name: b2cTenantId
    displayName: B2C Tenant ID
    type: string

variables:
  - name: azureSubscriptionName
    value: Azure Subscription
  - name: azureSubscriptionId
    value: b55f04c5-29eb-4060-b6fe-58d8503e9c9a
  - name: resourceGroup
    value: rg-budgetify-tfstate
  - name: storageAccount
    value: sabudgetifytfstate
  - name: container
    value: terraform-state
  - name: tfplan
    value: tfplan
  - name: key
    value: b2c/${{ parameters.environment }}.terraform.tfstate
  - name: environmentFullName
    ${{ if eq(parameters.environment, 'dev') }}:
      value: Development
  - name: workingDirectory
    value: $(System.DefaultWorkingDirectory)/Deployments/Infrastructure/Terraform/AzureADB2C/$(environmentFullName)

stages:
  - stage: DeployB2C
    displayName: Deploy B2C resources to $(environmentFullName) environment

    jobs:
      - job: job_deploy_terraform
        displayName: Deploy Terraform

        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform latest

          - task: AzureCLI@2
            displayName: Terraform Init
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "${{ parameters.b2cTenantId }}"

                terraform init `
                  -backend-config='resource_group_name="$(resourceGroup)"' `
                  -backend-config='storage_account_name="$(storageAccount)"' `
                  -backend-config='container_name="$(container)"' `
                  -backend-config='key="$(key)"'

          - task: AzureCLI@2
            displayName: Terraform Validate
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "${{ parameters.b2cTenantId }}"

                terraform validate

          - task: AzureCLI@2
            displayName: Export variables for Terraform
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $rgName = az group list --query "[?tags.Environment == '$(environmentFullName)'].name | [0]"
                $keyVaultId = az resource list `
                  --query "[?type == 'Microsoft.KeyVault/vaults' && tags.Environment == '$(environmentFullName)'].id | [0]"

                Write-Host "##vso[task.setvariable variable=resourceGroupName]$rgName"
                Write-Host "##vso[task.setvariable variable=keyVaultId]$keyVaultId"

          - task: AzureCLI@2
            displayName: Terraform Plan
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "${{ parameters.b2cTenantId }}"

                terraform plan `
                  -out $(tfplan) `
                  -var 'resource_group_name="$(resourceGroupName)"' `
                  -var 'key_vault_id="$(keyVaultId)"'

          - task: AzureCLI@2
            displayName: Terraform Apply
            name: applyStatus
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "${{ parameters.b2cTenantId }}"

                terraform apply $(tfplan)

          - task: AzureCLI@2
            displayName: Export Terraform output as Pipeline Variables
            name: terraformOutput
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "${{ parameters.b2cTenantId }}"

                # Get the output
                $output = $(terraform output -json | ConvertFrom-Json)

                # Export output as pipeline variables
                foreach ($property in $output.psobject.properties) {
                  Write-Host "##vso[task.setvariable variable=$($property.Name);isOutput=true;isSecret=$($property.Value.sensitive)]$($property.Value.value)"
                }

      - job: job_deploy_scripts
        dependsOn: job_deploy_terraform
        displayName: Deploy Scripts

        variables:
          - name: clientId
            value: $[ dependencies.job_deploy_terraform.outputs['terraformOutput.graph_client_id'] ]
          - name: clientSecret
            value: $[ dependencies.job_deploy_terraform.outputs['terraformOutput.graph_secret'] ]
          - name: tenantId
            value: $[ dependencies.job_deploy_terraform.outputs['terraformOutput.b2c_tenant_domain_name'] ]
          - name: apiConnectorPassword
            value: $[ dependencies.job_deploy_terraform.outputs['terraformOutput.api_connector_password'] ]

          - name: apiConnectorDisplayName
            value: Budgetify API
          - name: apiConnectorTargetUrl
            value: https://budgetify.loca.lt/
          - name: apiConnectorUsername
            value: BudgetifyUser

        steps:
          - task: PowerShell@2
            displayName: Deploy B2C User flows
            env:
              CLIENT_SECRET: $(clientSecret)
              API_CONNECTOR_PASSWORD: $(apiConnectorPassword)
            inputs:
              ignoreLASTEXITCODE: true
              pwsh: true
              failOnStderr: true
              workingDirectory: $(System.DefaultWorkingDirectory)
              targetType: filePath
              filePath: Deployments/Infrastructure/Scripts/AzureAdB2C/DeployB2CUserFlows.ps1
              arguments: >
                -ClientId $(clientId)
                -ClientSecret $env:CLIENT_SECRET
                -TenantId $(tenantId)
                -ApiConnector @{ "DisplayName"="$(apiConnectorDisplayName)"; "TargetUrl"="$(apiConnectorTargetUrl)"; "Username"="$(apiConnectorUsername)"; "Password"="$env:API_CONNECTOR_PASSWORD"; }

              # script: |
              # $filePath = ".\Deployments\Infrastructure\Scripts\AzureAdB2C\DeployB2CUserFlows.ps1"

              # $params = @{
              #   ClientId     = "asd"
              #   ClientSecret = "asd"
              #   TenantId     = "asd"
              #   ApiConnector = @{
              #     DisplayName = "asd"
              #     TargetUrl   = "asd"
              #     Username    = "asd"
              #     Password    = "asd"
              #   }
              # }

              # [pshashtable]$apiConnector = @{
              #   DisplayName = "asd"
              #   TargetUrl   = "asd"
              #   Username    = "asd"
              #   Password    = "asd"
              # }

              # pwsh $filePath `
              #   -ClientId "asd" `
              #   -ClientSecret "asd" `
              #   -TenantId "asd" `
              #   -ApiConnector @{
              #     DisplayName = "asd"
              #     TargetUrl   = "asd"
              #     Username    = "asd"
              #     Password    = "asd"
              #   }
