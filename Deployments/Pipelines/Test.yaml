#########################################
### Budgetify - Deploy Infrastructure ###
#########################################

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

trigger: none
pr: none

stages:
  - stage: DeployInfrastructure
    displayName: Deploy Infrastructure

    jobs:
      - job: job_deploy_terraform
        displayName: Deploy Terraform

        variables:
          - name: azureSubscriptionName
            value: Azure Subscription
          - name: azureSubscriptionId
            value: b55f04c5-29eb-4060-b6fe-58d8503e9c9a
          - name: resourceGroup
            value: rg-budgetify-tfstate
          - name: storageAccount
            value: sabudgetifytfstate
          - name: container
            value: terraform-state
          - name: key
            value: test.terraform.tfstate
          - name: workingDirectory
            value: $(System.DefaultWorkingDirectory)/Deployments/Infrastructure/Terraform/Test
          - name: tfplan
            value: tfplan

        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform latest

          - task: AzureCLI@2
            displayName: Terraform Init
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform init `
                  -backend-config='resource_group_name="$(resourceGroup)"' `
                  -backend-config='storage_account_name="$(storageAccount)"' `
                  -backend-config='container_name="$(container)"' `
                  -backend-config='key="$(key)"'

          - task: AzureCLI@2
            displayName: Terraform Validate
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform validate

          - task: AzureCLI@2
            displayName: Terraform Plan
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform plan -out $(tfplan)

          - task: AzureCLI@2
            displayName: Terraform Apply
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform apply $(tfplan)

          - task: AzureCLI@2
            displayName: Export Terraform output as Pipeline Variables
            name: terraformOutput
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                # Get the output
                $output = $(terraform output -json | ConvertFrom-Json)

                # Export output as pipeline variables
                foreach ($property in $output.psobject.properties) {
                  Write-Host("##vso[task.setvariable variable=$($prop.Name);isOutput=true;isSecret=$($prop.Value.sensitive)]$($prop.Value.value)")
                }

      - job: job_deploy_scripts
        dependsOn: job_deploy_terraform
        displayName: Deploy Scripts

        variables:
          - name: apiConnectorDisplayName
            value: Budgetify API
          - name: apiConnectorTargetUrl
            value: budgetify.io
          - name: apiConnectorUsername
            value: zoki
          - name: apiConnectorPassword
            value: test123
          - name: rgName
            value: dependencies.job_deploy_terraform.outputs['terraformOutput.resource_group_name']
          - name: saName
            value: dependencies.job_deploy_terraform.outputs['terraformOutput.storage_account_name']

        steps:
          - powershell: |
              Write-Host $(rgName)
              Write-Host $(saName)
              Write-Host $(resource_group_name)
              Write-Host $(storage_account_name)

      #   steps:
      #     - task: PowerShell@2
      #       displayName: Deploy B2C User flows
      #       inputs:
      #         workingDirectory: $(System.DefaultWorkingDirectory)
      #         filePath: Deployments/Infrastructure/Scripts/AzureAdB2C/DeployB2CUserFlows.ps1
      #         arguments: >
      #           --ClientId $(clientId)
      #           --ClientSecret $(clientSecret)
      #           --TenantId $(tenantId)
      #           --ApiConnector @{
      #             DisplayName = $(apiConnectorDisplayName)
      #             TargetUrl = $(apiConnectorTargetUrl)
      #             Username = $(apiConnectorUsername)
      #             Password = $(apiConnectorPassword)
      #           }
