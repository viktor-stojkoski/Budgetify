#########################################
### Budgetify - Deploy Infrastructure ###
#########################################

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

trigger: none
pr: none

stages:
  - stage: DeployInfrastructure
    displayName: Deploy Infrastructure

    jobs:
      - job: job_deploy_terraform
        displayName: Deploy Terraform
        variables:
          - name: serviceConnection
            value: Azure Subscription
          - name: resourceGroup
            value: rg-budgetify-tfstate
          - name: storageAccount
            value: stbudgetifytfstate
          - name: container
            value: terraform-state
          - name: key
            value: dev.terraform.tfstate
          - name: workingDirectory
            value: $(System.DefaultWorkingDirectory)/Deployments/Infrastructure/Terraform/Development

        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform latest

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              workingDirectory: $(workingDirectory)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                terraform init -backend-config='subscription_id="b55f04c5-29eb-4060-b6fe-58d8503e9c9a" resource_group_name="rg-budgetify-tfstate" storage_account_name="stbudgetifytfstate" container_name="terraform-state" key="dev.terraform.tfstate"'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(serviceConnection)
              workingDirectory: $(workingDirectory)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                terraform plan

          # - task: TerraformTaskV3@3
          #   displayName: Terraform Init
          #   inputs:
          #     backendServiceArm: ${{ variables.serviceConnection }}
          #     backendAzureRmResourceGroupName: $(resourceGroup)
          #     backendAzureRmStorageAccountName: $(storageAccount)
          #     backendAzureRmContainerName: $(container)
          #     backendAzureRmKey: $(key)
          #     workingDirectory: $(workingDirectory)
          #     runAzLogin: true

          # - task: TerraformTaskV3@3
          #   displayName: Terraform Validate
          #   inputs:
          #     command: validate

          # - task: TerraformTaskV3@3
          #   displayName: Terraform Plan
          #   inputs:
          #     command: plan
          #     environmentServiceNameAzureRM: ${{ variables.serviceConnection }}
          #     backendAzureRmResourceGroupName: $(resourceGroup)
          #     backendAzureRmStorageAccountName: $(storageAccount)
          #     backendAzureRmContainerName: $(container)
          #     backendAzureRmKey: $(key)
          #     workingDirectory: $(workingDirectory)
          #     runAzLogin: true

          # - task: TerraformTaskV3@3
          #   displayName: Terraform Apply
          #   inputs:
          #     command: apply
          #     commandOptions: --auto-approve
          #     backendAzureRmResourceGroupName: $(resourceGroup)
          #     backendAzureRmStorageAccountName: $(storageAccount)
          #     backendAzureRmContainerName: $(container)
          #     backendAzureRmKey: $(key)
          #     workingDirectory: $(workingDirectory)

      - job: job_deploy_scripts
        dependsOn: job_deploy_terraform
        displayName: Deploy Scripts
        steps:
          - task: PowerShell@2
            displayName: Deploy B2C User flows
            inputs:
              filePath: ${{ variables['System.DefaultWorkingDirectory'] }}/Deployments/Infrastructure/Scripts/AzureAdB2C/DeployB2CUserFlows.ps1
              arguments: >
                --ClientId $(clientId)
                --ClientSecret $(clientSecret)
                --TenantId $(tenantId)
                --ApiConnector @{
                  DisplayName = $(apiConnectorDisplayName)
                  TargetUrl = $(apiConnectorTargetUrl)
                  Username = $(apiConnectorUsername)
                  Password = $(apiConnectorPassword)
                }
