#########################################
### Budgetify - Deploy Infrastructure ###
#########################################

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

trigger: none
pr: none

variables:
  - name: azureSubscriptionName
    value: Azure Subscription
  - name: azureSubscriptionId
    value: b55f04c5-29eb-4060-b6fe-58d8503e9c9a
  - name: resourceGroup
    value: rg-budgetify-tfstate
  - name: storageAccount
    value: sabudgetifytfstate
  - name: container
    value: terraform-state
  - name: tfplan
    value: tfplan

stages:
  - stage: DeployInfrastructureDevelopment
    displayName: '[Development] Deploy Infrastructure'

    variables:
      - name: key
        value: dev.terraform.tfstate
      - name: workingDirectory
        value: $(System.DefaultWorkingDirectory)/Deployments/Infrastructure/Terraform/Development

    jobs:
      - job: job_deploy_terraform
        displayName: Deploy Terraform

        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform latest

          - task: AzureCLI@2
            displayName: Terraform Init
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform init `
                  -backend-config='resource_group_name="$(resourceGroup)"' `
                  -backend-config='storage_account_name="$(storageAccount)"' `
                  -backend-config='container_name="$(container)"' `
                  -backend-config='key="$(key)"'

          - task: AzureCLI@2
            displayName: Terraform Validate
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform validate

          - task: AzureCLI@2
            displayName: Terraform Plan
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform plan -out $(tfplan)

          - task: AzureCLI@2
            displayName: Terraform Apply
            inputs:
              azureSubscription: ${{ variables.azureSubscriptionName }}
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(workingDirectory)
              failOnStandardError: true
              addSpnToEnvironment: true
              inlineScript: |
                $Env:ARM_CLIENT_ID = "$env:servicePrincipalId"
                $Env:ARM_CLIENT_SECRET = "$env:servicePrincipalKey"
                $Env:ARM_SUBSCRIPTION_ID = "$(azureSubscriptionId)"
                $Env:ARM_TENANT_ID = "$env:tenantId"

                terraform apply $(tfplan)
