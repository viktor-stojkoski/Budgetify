#################################################
### Budgetify - Pull Request Build Validation ###
#################################################

pool:
  name: Azure Pipelines
  demands: msbuild
  vmImage: ubuntu-22.04

trigger: none

pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - Clients/next
      - Deployments/Pipelines/Budgetify-Nextjs-PR.yaml

variables:
  containerRegistry: budgetifyacr.azurecr.io
  buildConfiguration: Release
  azureSubscriptionName: Azure Subscription
  dockerBuildContext: .

stages:
  - stage: BuildAndTest
    displayName: Build and Test Budgetify

    jobs:
      - job: job_spell_check
        displayName: Spell Check Solution

        steps:
          - task: Npm@1
            displayName: Install CSpell
            inputs:
              command: custom
              customCommand: install -g cspell

          - task: PowerShell@2
            displayName: Run CSpell on Solution
            inputs:
              pwsh: true
              targetType: inline
              script: cspell ** --gitignore

      - job: job_build_test_backend
        displayName: Budgetify .NET Build & Test

        variables:
          - name: githubNugetServiceConnection
            value: GithubNugetFeed
          - name: testProjects
            value: "**/*.Tests.csproj"
          - name: apiImageName
            value: $(containerRegistry)/budgetify.api
          - name: functionsImageName
            value: $(containerRegistry)/budgetify.functions
          - group: Secrets
          - name: privateFeedTokenVariable
            value: $(PrivateFeedToken)

        steps:
          - task: DotNetCoreCLI@2
            displayName: .NET Restore Tests
            inputs:
              command: restore
              feedsToUse: config
              nugetConfigPath: NuGet/nuget.config
              externalFeedCredentials: ${{ variables.githubNugetServiceConnection }}
              noCache: true
              projects: $(testProjects)
              verbosityRestore: Quiet

          - task: DotNetCoreCLI@2
            displayName: .NET Build Tests
            inputs:
              projects: $(testProjects)
              arguments: --configuration $(buildConfiguration) --no-restore

          - task: DotNetCoreCLI@2
            displayName: .NET Test
            inputs:
              command: test
              projects: $(testProjects)
              arguments: --configuration $(buildConfiguration) --no-restore --no-build

          - task: PowerShell@2
            displayName: Docker build API image
            inputs:
              pwsh: true
              targetType: inline
              failOnStderr: true
              script: |
                docker build `
                  --file $(Build.SourcesDirectory)/Api/Budgetify.Api/Dockerfile `
                  --tag $(apiImageName):latest `
                  --tag $(apiImageName):$(Build.BuildId) `
                  --build-arg PRIVATE_FEED_TOKEN="${{ variables.privateFeedTokenVariable }}" `
                  --quiet `
                  $(dockerBuildContext)

          - task: PowerShell@2
            displayName: Docker build Functions image
            inputs:
              pwsh: true
              targetType: inline
              failOnStderr: true
              script: |
                docker build `
                  --file $(Build.SourcesDirectory)/Api/Budgetify.Functions/Dockerfile `
                  --tag $(functionsImageName):latest `
                  --tag $(functionsImageName):$(Build.BuildId) `
                  --build-arg PRIVATE_FEED_TOKEN="${{ variables.privateFeedTokenVariable }}" `
                  --quiet `
                  $(dockerBuildContext)

      - job: job_build_database
        displayName: Budgetify Build Database

        pool:
          name: Azure Pipelines
          demands: msbuild
          vmImage: windows-2022

        steps:
          - task: MSBuild@1
            displayName: Database Build
            inputs:
              solution: Databases/Budgetify.Database/Budgetify.Database.sqlproj
              configuration: $(buildConfiguration)
              clean: true

      - job: job_build_test_frontend
        displayName: Budgetify Angular Build & Test

        variables:
          workingDirectory: $(Build.SourcesDirectory)/Clients/Angular
          angularImageName: $(containerRegistry)/budgetify.angular

        steps:
          - task: Npm@1
            displayName: Install packages
            inputs:
              command: ci
              workingDir: $(workingDirectory)

          - task: Npm@1
            displayName: Install Angular CLI
            inputs:
              command: custom
              workingDir: $(workingDirectory)
              customCommand: install -g @angular/cli

          - task: Npm@1
            displayName: Angular Lint
            inputs:
              command: custom
              workingDir: $(workingDirectory)
              customCommand: run lint

          - task: Npm@1
            displayName: Angular Test
            inputs:
              command: custom
              workingDir: $(workingDirectory)
              customCommand: run test-headless

          - task: PowerShell@2
            displayName: Docker build Angular image
            inputs:
              pwsh: true
              targetType: inline
              failOnStderr: true
              script: |
                docker build `
                  --file $(Build.SourcesDirectory)/Clients/Angular/Dockerfile `
                  --tag $(angularImageName):latest `
                  --tag $(angularImageName):$(Build.BuildId) `
                  --quiet `
                  $(dockerBuildContext)
